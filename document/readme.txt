以下原则是软件开发的要求：

	1:开放-封闭原则：软件实体（类，模块，函数等）应该可以扩展，但是不可修改。
		此原则是面向对象设计的核心所在，遵循此原则，可提高 可维护性，可扩展，可复用，灵活性，开发人员应该对程序中呈现出
		频繁变化的那部分做出抽象。对应用程序中的第个部分都刻意的进行抽象同样不是个好主意。
		
	2:依赖倒转原则：高层模块不应该依赖低层模块，两者都应该依赖抽象。抽象不应该依赖细节，细节应该依赖抽象。
	
	3:单一职责原则：一个类应该仅有一个引起它变化的原因。
		如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力，
		这种耦合会导致脆弱的设计，当变化发生时，设计会遭受到意想不到的破坏。
	
	4:里氏代换原则：子类必须能够替换掉它们的父类。
		父类都替换成它的子类，程序的行为没有变化。
	
	5:迪米特法则：如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用，如果其中一个类需要调用
		另一个类的某一个方法，可以通过第三者转发这个调用。类之间的耦合越弱，越有利于利用，一个处在弱耦合的类被修改，
		不会对有关系的类造成波及。
		
	6:合成/聚合复用原则：尽量使用合成/聚合，不要使用类继承。
